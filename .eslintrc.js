module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  'prettier/prettier': ['error', { endOfLine: 'off', semi: false }],
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    "@typescript-eslint/consistent-type-imports": "off",
    camelcase: 'off',
    'linebreak-style': 0,
    'no-console': 'warn',
    'global-require': 'off',
    'import/no-cycle': 'off',
    'arrow-body-style': 'off',
    'no-await-in-loop': 'off',
    'import/namespace': 'off',
    'no-param-reassign': 'off',
    'consistent-return': 'off',
    semi: ['error', 'never'],
    'import/no-unresolved': 'off',
    'no-underscore-dangle': 'off',
    curly: ['error', 'multi-line'],
    'react/forbid-prop-types': 'off',
    'react/jsx-curly-newline': 'off',
    'comma-dangle': ['error', 'never'],
    'import/no-dynamic-require': 'warn',
    'react-hooks/rules-of-hooks': 'off',
    'react/jsx-props-no-spreading': 'off',
    'import/prefer-default-export': 'off',
    'react-hooks/exhaustive-deps': 'warn',
    'arrow-parens': ['error', 'as-needed'],
    'jsx-quotes': ['error', 'prefer-single'],
    'import/no-extraneous-dependencies': 'off',
    'react/jsx-one-expression-per-line': 'off',
    'no-return-assign': ['error', 'except-parens'],
    'no-tabs': ['error', { allowIndentationTabs: true }],
    'react/jsx-wrap-multilines': ['error', { prop: 'ignore' }],
    'max-len': ['error', 150, { ignoreTemplateLiterals: true }],
    quotes: ['error', 'single', { allowTemplateLiterals: true }],
    'no-unused-expressions': ['error', { allowShortCircuit: true }],
    'operator-linebreak': [
      'error',
      'after',
      { overrides: { '?': 'ignore', ':': 'ignore' } },
    ],
    'no-unused-vars': 'off',
  },
};
